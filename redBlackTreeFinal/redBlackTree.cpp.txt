/*
  Red-Black Tree
  By: Nividh Singh
  Date: 12/11/20

  This program is a self balancing BST
  Video used for reference for insertion: https://www.youtube.com/watch?v=5IBxA-bZZH8&list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin&index=3
  Video used for reference for deletion: https://www.youtube.com/watch?v=CTvfzU_uNKE
*/




#include <iostream>
#include <string.h>
#include <fstream>


using namespace std;

//Constants
#define BLACK true
#define RED false
#define RIGHT 1
#define LEFT 2
#define COUNT 10

//Node struct
struct node {
  node* left;
  node* right;
  node* parent;
  int data;
  bool color;
  node(int element) {
    left = NULL;
    right = NULL;
    parent = NULL;
    data = element;
    color = RED;
  }
};

//Prototypes
node* insert (node* &head, int element, int side);//Inserts a new element without fixing
node* callInsert (node* &head, int element);//Calls insert function
bool getColor(node* current);//Gets the color of a node
node* getSibling(node*current);//Gets a sibling of a node
node* getUncle(node* current);//Gets an uncle of a node
void print(node* head, int size);//Prints the tree
void fixTree(node* &head, node* current);//Fixes the tree (this calls insert and runs through the cases)
node* search(node* head, int element) ;//Search Function
node* nodeToDelete(node* head, int element);//Finds the next greatest node after a node
void callDelete(node* &head, int element);
int getNumberOfChildren(node* current);
int getSide(node* child, node* parent);
bool deleteNode(node* current);
void doubleBlackFix(node* &head, node* doubleBlack, bool todelete);


int debug(node* head, int count) {
  if(head == NULL) {
    return count;
  }
  //cout << head->data << endl;
  if(getColor(head) == BLACK) {
    count++;
  }
  int i = debug(head->left, count);
  int j = debug(head->right, count);
  
  if(i == j && i != -1) {
    return i;
  }
  return -1;
  
}





//main function
int main() {
  srand(time(NULL));
  //Node pointer for the top
  node* head = NULL;
  int size = 10;
  cin >> size;
  node* test;

  for(int j = 0; j < size; j++) {
    cout << "J-loop" << endl;
    for(int i = 0; i < size; i++) {
      cout << "i loop" << endl;
      print(head, 0);
      fixTree(head, callInsert(head, i));
OB      print(head, 0);
OB    }
OB    //node* test = search(head, 10);
OB    print(head, 0);
OB    //cin.get();
    //for(int k = j; k <= j+size; k++) {
    while(head != NULL) {
OB      cout << "k loop" << endl;
      //test = search(head, 10);
      callDelete(head, rand()%size);
      print(head, 0);
OB      if(debug(head, 0) == -1) {
	cout << "END BECAUSE OF DEBUG ERROR" << endl;
OB	return 1;
      }
      //cin.get();
      /*if(getSide(test, test->parent) == RIGHT) {
	cout << "T" << test->data << endl;
OB	cout << "TP" << test->parent->data << endl;
	cout << "TPT" << test->parent->right->data << endl;
	if(test->data != test->parent->right->data) {
	  return 0;
	}
OB      }
      else {
	cout << "T" << test->data << endl;
	cout << "TP" << test->parent->data << endl;
	cout << "TPT" << test->parent->left->data << endl;
	if(test->data != test->parent->left->data) {
	  return 0;
	}
	}*/
    }
    //print(head, 0);
  }
  /*
  //Loop for the program to keep going
  char input[20];
  while(true) {
OA    cout << "> ";
    cin.get(input, 20);
    cin.get();
    //If the user says add, then we get an input and we simply add it to our binary tree
    if(strcmp(input, "ADD") == 0) {
      cout << "Enter any number in the relm of integers (0-2^31) to be added to the tree: ";
      int newNumber;
      cin >> newNumber;
      cin.get();
      fixTree(head, callInsert(head, newNumber));
    }
    //If the user says print, we print
    else if(strcmp(input, "PRINT") == 0) {
      print(head, 0);
    }
    //If the user wants us to read from a file, we ask for the file name and read from the file, one number at a time adding to our red-black tree
    else if(strcmp(input, "READ") == 0) {
    int number;
OA    cout << "What is the file name? " << endl;
    char fileName[100];
    cin.get(fileName, 100);
    cin.get();
OA    //Sets up file
    ifstream file;
    file.open(fileName);
    //Goes through the file and inserts everything into the heap
OA    while (file >> number) {
    fixTree(head, callInsert(head, number));
OA    }
OA    file.close();
OA    }
    }*/
}

OAbool deleteNode(node* current) {
OA  cout << "in delete node" << endl;
OA  if(current == NULL) {
    cout << "P1" << endl;
OA    return false;
OA  }
  node* child = NULL;
  if(current->right != NULL) {
    child = current->right;
OA  }
  else {
OA    child = current->left;
  }
  
  
OA  cout << "P2" << endl;
  if(getSide(current, current->parent) == RIGHT) {
OA    cout << "P3" << endl;
    current->parent->right = child;
OA    cout << "P4" << endl;
  }
  else {
    cout << "P5" << endl;
OA    current->parent->left = child;
    cout << "P6" << endl;
OA  }
  
OA  //cout << "Before delete" << endl;
  //delete current;
  //cout << "After delete" << endl;
  return true;
OA}



void doubleBlackFix(node* &head, node* doubleBlack, bool toDelete) {
  cout << "in double black fix" << endl;

OA/*
Case 1: Only one without mirror image
Case 2->3
Case 3->4
Case 4->terminal
Case 5->6
Case 6->terminal

*/
  
  cout << "Before case 1" << endl;
  if(head == doubleBlack) {
    if(toDelete) {
      deleteNode(doubleBlack);
    }
    return;
  }
  print(head, 0);
  cout << "before setting family" << endl;
  node* parent = doubleBlack->parent;
  cout << "Sibling" << endl;
  node* sibling = getSibling(doubleBlack);
  cout << "newphewright" << endl;
  node* newphewRight = getSibling(doubleBlack)->right;
  cout << "newpgew left" << endl;
  node* newphewLeft = getSibling(doubleBlack)->left;
  cout << "AFTER SETTING FAMILY" << endl;
  
  cout << "THIS " << doubleBlack->data << endl << endl << endl;

  cout <<"parent"<< getColor(parent) << endl;
  cout <<"siblin"<< getColor(sibling) << endl;
  cout <<"newp right"<< getColor(newphewRight) << endl;
  cout <<"newp left"<< getColor(newphewLeft) << endl;
  cout <<"Black"<< BLACK << endl;
  


  
  
  //All the following are for one direction
  if(getSide(doubleBlack, doubleBlack->parent) == LEFT) {
    print(head, 0);
    
    cout << "In first mirror set of cases" << endl;
    /*
      Case: 2
      Parent: Black
      Sibling: Red
      NephewRight: Black
      NephewLeft: Black
    */
    
    cout << "Before Case 2" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == RED && getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
      cout << "In case 2f" << endl;
      if(head == parent) {
	head = sibling;
	sibling->parent = NULL;
      }
      else {
	sibling->parent = parent->parent;
	if(getSide(parent, parent->parent) == LEFT) {
	  parent->parent->left = sibling;
	}
	else {
	  parent->parent->right = sibling;
	}
      }  
      parent->color = RED;
      sibling->color = BLACK;

      if(newphewLeft != NULL) {
	newphewLeft->parent = parent;
      }
      sibling->left = parent;
      parent->parent = sibling;
      parent->right = newphewLeft;
      
      //call fixdoubleblack from node toDelete = true
      doubleBlackFix(head, doubleBlack, toDelete);
      return;
    }
    
    
    
    
    /*
      Case: 3
      Parent: Black
      Sibling: Black
      NephewRight: Black
      NephewLeft: Black
    */
    
    cout << "Before case 3" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == BLACK && getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
      cout << "IN case 34" << endl;
      cout << sibling->data << endl;;
      cout << doubleBlack->data << endl;

      sibling->color = RED;
      //if delete, we can delete the doubleBlack
      //Call fix doublblac from doubleBlack->parent with toDelete = false
      if(toDelete) {
[O	cout << "DSFDSfasdjfnjskdlfkjsdhflkjsadhflkasdhfkljsadhfkjsdhfkjsdhfjksdhfjkdsnjcnsdcfjsdhflkjsdhfkjsadncjksdfjksdlhfkjsdhjkcndskjfhjdskfhkdsjlfn" << endl;
	print(head, 0);
	deleteNode(doubleBlack);
	print(head, 0);
      }
      doubleBlackFix(head, doubleBlack->parent, false);
      return;
    }
    
    /*
      Case: 4
      Parent: Red
      Sibling: Black
      NephewRight: Black
      NephewLeft: Black
    */
    
    cout << "Before Case 4" << endl;
    if(getColor(parent) == RED && getColor(sibling) == BLACK) {
      if(getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
	cout << "In case 4" << endl;
	sibling->color = RED;
	cout << "4a" << endl;
	parent->color = BLACK;
	cout << "4b" << endl;
	if(toDelete) {
	  cout << "In toDelete call" << endl;
	  deleteNode(doubleBlack);
	}
	cout << "4c" << endl;
	return;
	cout << "ASSADA" << endl;
      }
      else if(getColor(newphewRight) == BLACK && getColor(newphewLeft) == RED) {
        cout << "In case 4 part two" << endl;
        parent->right = newphewLeft;
        newphewLeft->parent = parent;
        node* child = newphewLeft->right;
        if(child != NULL) {
          child->parent = sibling;
        }
        sibling->left = child;
        sibling->parent = newphewLeft;
        newphewLeft->right = sibling;

        newphewLeft->color = BLACK;
        sibling->color = RED;
	doubleBlackFix(head, doubleBlack, toDelete);
        return;
      }
    }


    /*
      Case: 5
      Parent: Black
      Sibling: Black
      NephewRight: Black
      NephewLeft: Red
    */
    
    
    cout << "Before case 5" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == BLACK && getColor(newphewRight) == BLACK && getColor(newphewLeft) == RED) {
      cout << "In case 5" << endl;
      node* n4 = newphewLeft->right;
      parent->right = newphewLeft;
      newphewLeft->parent = parent;
      sibling->parent = newphewLeft;
      sibling->left = n4;
      newphewLeft->right = sibling;
      if(n4 != NULL) {
	n4->parent = sibling;
      }
      
      newphewLeft->color = BLACK;
      sibling->color = RED;
      //Call fixdouble black with the same thing
      doubleBlackFix(head, doubleBlack, toDelete);
      return;
    }
    
    
    /*
      Case: 6
      Parent: Blue
      Sibling: Black
      NephewRight: Blue
      NephewLeft: Red
    */
    print(head, 0);
    cout << "Before case 6a" << endl;
    if(getColor(sibling) == BLACK && getColor(newphewRight) == RED) {
      cout << "In case 6" << endl;
      if(parent != head) {
	sibling->parent = parent->parent;
	if(getSide(parent, parent->parent) == LEFT) {
	  parent->parent->left = sibling;
	}
	else {
	  parent->parent->right = sibling;
	}
      }
      else {
	cout << "Changing Head" << endl;
	head = sibling;
	sibling->parent = NULL;	
      }
    
      parent->parent = sibling;
      parent->right = newphewLeft;
      cout << "p1" << endl;
      if(newphewLeft != NULL) {
	newphewLeft->parent = parent;
      }
      cout << "p1a" << endl;
      sibling->left = parent;
      cout << "p1b" << endl;
      newphewRight->color = BLACK;
      cout << "p2" << endl;
      sibling->color = parent->color;
      parent->color = BLACK;
      
      if(toDelete) {
	deleteNode(doubleBlack);
      }
    
      return;
    }
  }
  
  else {
    /*IMPORTANT: NOT DONE YET (STILL HAVE TO REVERSE STUFF)*/
    cout << "In else case" << endl;
    
    /*
      Case: 2
      Parent: Black
      Sibling: Red
      NephewRight: Black
      NephewLeft: Black
    */
    cout << "Before Case 2" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == RED && getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
      cout << "In case 2b" << endl;
      if(head == parent) {
	cout << "P1" << endl;
        head = sibling;
        sibling->parent = NULL;
      }
      else {
	cout << "P2" << endl;
        sibling->parent = parent->parent;
        if(getSide(parent, parent->parent) == LEFT) {
	  cout << "P3" << endl;
          parent->parent->left = sibling;
	}
        else {
	  cout << "P4" << endl;
          parent->parent->right = sibling;
        }
      }
      cout << "P5" << endl;
      parent->color = RED;
      sibling->color = BLACK;

      if(newphewRight != NULL) {
	newphewRight->parent = parent;
      }
      sibling->right = parent;
      parent->parent = sibling;
      parent->left = newphewRight;
      print(head, 0);
      //call fixdoubleblack from node toDelete = true
      doubleBlackFix(head, doubleBlack, toDelete);
      return;
    }


    /*
      Case: 3
      Parent: Black
      Sibling: Black
      NephewRight: Black
      NephewLeft: Black
    */
    cout << "Before case 3" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == BLACK && getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
      cout << "IN case 3f" << endl;
      cout << doubleBlack->data << endl;
      cout << sibling->data << endl;
      sibling->color = RED;
      print(head, 0);
      //if delete, we can delete the doubleBlack
      //Call fix doublblac from doubleBlack->parent with toDelete = false
      if(toDelete) {
	deleteNode(doubleBlack);
      }
      doubleBlackFix(head, doubleBlack->parent, false);
      return;
    }

    /*
      Case: 4
      Parent: Red
      Sibling: Black
      NephewRight: Black or Red
      NephewLeft: Black
    */
    
    cout << "Before case 4" << endl;
    if(getColor(parent) == RED && getColor(sibling) == BLACK) {
      if(getColor(newphewRight) == BLACK && getColor(newphewLeft) == BLACK) {
	cout << "In case 4" << endl;
	sibling->color = RED;
	parent->color = BLACK;
	if(toDelete) {
	  cout << "SDFadsfsdjflsdjflsjdflksjdfkjsdlkfjsdlkfjsdlkjflkdsjflkdsjfkldsjfkldjfkdjfklsdjfkmckldsklfksdlmcklsdjfklsdmckldsjfkldsmckdsjfkljsdkmcskdfjsdlkjmfjl" << endl;
	  deleteNode(doubleBlack);
	}
	return; 
      }
      else if(getColor(newphewRight) == RED && getColor(newphewLeft) == BLACK) {
	cout << "In case 4 part two" << endl;
	parent->left = newphewRight;
	newphewRight->parent = parent;
	node* child = newphewRight->left;
	if(child != NULL) {
	  child->parent = sibling;
	}
	sibling->right = child;
	sibling->parent = newphewRight;
	newphewRight->left = sibling;
	
	newphewRight->color = BLACK;
	sibling->color = RED;
	doubleBlackFix(head, doubleBlack, toDelete);
	return;
      }
    }
    
    
    /*
      Case: 5
      Parent: Black
      Sibling: Black
      NephewRight: Red
      NephewLeft: Black
    */
    
    
    cout << "Before case 5" << endl;
    if(getColor(parent) == BLACK && getColor(sibling) == BLACK && getColor(newphewLeft) == BLACK && getColor(newphewRight) == RED) {
      cout << "in case 5" << endl;
      node* n4 = newphewRight->left;
      parent->left = newphewRight;
      newphewRight->parent = parent;
      sibling->parent = newphewRight;
      sibling->right = n4;
      newphewRight->left = sibling;
      if(n4 != NULL) {
        n4->parent = sibling;
      }
      
      newphewRight->color = BLACK;
      sibling->color = RED;
      //Call fixdouble black with the same thing
      doubleBlackFix(head, doubleBlack, toDelete);
      return;
    }
    
    
    /*
[I      Case: 6
      Parent: Blue
      Sibling: Black
      NephewRight: Red
      NephewLeft: Blue
    */

    cout << "Before case 6" << endl;
    if(getColor(sibling) == BLACK && getColor(newphewLeft) == RED) {
      cout << "In case 6" << endl;
      if(parent != head) {
        sibling->parent = parent->parent;
        if(getSide(parent, parent->parent) == RIGHT) {
          parent->parent->right = sibling;
        }
        else{
          parent->parent->left = sibling;
        }
      }
      else {
	cout << "Change head" << endl;
        head = sibling;
	sibling->parent = NULL;
      }

      parent->parent = sibling;
      parent->left = newphewRight;
      if(newphewRight != NULL) {
	newphewRight->parent = parent;
      }
      sibling->right = parent;
      newphewLeft->color = BLACK;
      sibling->color = parent->color;
      parent->color = BLACK;
      if(toDelete) {
        deleteNode(doubleBlack);
      }
      
      return;
    }
  }
  cout << "End of fixdoublblack function" << endl;
}
  
  

  
  

void callDelete(node* &head, int element) {
  if(head == NULL) {
    cout << "The tree is empty" << endl;
    return;
  }
  
  node* elementNode = search(head, element);
  print(head, 0);
  if(elementNode == NULL) {
    cout << "Number not found "<< element << endl;
    return;
  }

  if(elementNode == head && getNumberOfChildren(elementNode) == 0) {
    head = NULL;
    delete elementNode;
    return;
  }
  
  //print(head, 0);
  cout << "ELEMENT: " << element << endl; 
  node* toDelete = nodeToDelete(head, element);
  cout << "callDelete after initializing" << endl;
  if(toDelete != NULL) {
    cout << "TO DELETE: " << toDelete->data << endl;
    cout << "To Delete Parent: " << toDelete->parent->data << endl;
  }
  //WORKS
  cout << "Before no red child" << endl;
  //If the node we want to delete is red and doesn't have two children (it cannot have just one child)
  if(getNumberOfChildren(elementNode) == 0 && getColor(elementNode) == RED) {
    cout << "In no red child" << endl;
    if(getSide(elementNode, elementNode->parent) == RIGHT) {
      elementNode->parent->right = NULL;
      //delete elementNode;
      return;
    }
    else {
      elementNode->parent->left = NULL;
      //delete elementNode;
      return;
    }
  }


  //WORKS
  cout << "Before less than two black children: " << getNumberOfChildren(elementNode) << endl;
  if((getNumberOfChildren(elementNode) != 2 && getColor(elementNode) == BLACK) /*&& (getColor(elementNode->right) == BLACK) && (getColor(elementNode->left) == RED)*/) {
    cout << "In less than two black children" << endl;

    if(getNumberOfChildren(elementNode) == 0) {
      doubleBlackFix(head, elementNode, true);
      return;
    }
    node* child;
    if(elementNode->right != NULL) {
      child = elementNode->right;
    }
    else {
      child = elementNode->left;
    }
    
    if(elementNode != head) {
      cout << "P0" << endl;
      if(getSide(elementNode, elementNode->parent) == RIGHT) {
	cout << "P1" << endl;
	
	elementNode->parent->right = child;
	child->parent = elementNode->parent;
	if(getColor(child) == RED) {
	  child->color = BLACK;
	  return;
	}
	else {
	  //Call function to fix double black with elementNode->parent
	  doubleBlackFix(head, child, true);
	  //delete elementNode;
	  return;
	}
      }
      else {
	cout << "P2" << endl;
	elementNode->parent->left = child;
	child->parent = elementNode->parent;
	//Call function to fix double black with elementNode->parent
	print(head, 0);
	if(getColor(child) == RED) {
	  child->color = BLACK;
	  //delete elementNode;
	  return;
	}
	else {
	  doubleBlackFix(head, child, true);
	  //delete elementNode;
	  return;
	}
      }
      cout << "P3" << endl;
    }
    else {
      cout << "P4" << endl;
      head = child;
      head->color = BLACK;
      cout << "P5" << endl;
[O      child->parent = NULL;
      cout << "P6" << endl;
      return;
    }
  }

  
  cout << "before changing data" << endl;
  elementNode->data = toDelete->data;
  cout << "after changing data" << endl;
  

  cout << "Before black with one red child" << endl;
  if(getNumberOfChildren(toDelete) == 1) {
    cout << "WE IN" << endl;
    node* child;
    if(toDelete->right != NULL) {
      child = toDelete->right;
    }
    else {
      child = toDelete->left;
    }
    if(getColor(toDelete) != getColor(child)) {
      if(getSide(toDelete, toDelete->parent) == RIGHT) {
	toDelete->parent->right = child;
      }
      else {
	toDelete->parent->left = child;
      }
      child->parent = toDelete->parent;
      child->color = BLACK;
    }
    return;
  }








  
  cout << "Before Bottom and Red" << endl;
  print(head, 0);
  //If the node we are deleting (bottom one) is RED, we just delete it
  if(getColor(toDelete) == RED) {
    cout << "Bottom and Red" << endl;
    
    if(getSide(toDelete, toDelete->parent) == RIGHT) {
      cout << "P1" << endl;
      cout << "TDLT" << toDelete->data << endl;
      cout << "PARENT" << toDelete->parent->data << endl;
      toDelete->parent->right = toDelete->right;
      cout << "P1b" << endl;
      if(toDelete->right != NULL) {
	toDelete->right->parent = toDelete->parent;
      }
      cout << "P1c" << endl;
    }
    else {
      cout << "P2" << endl;
      toDelete->parent->left = toDelete->right;
      cout << "P2b" << endl;
      if(toDelete->left != NULL) {
	cout << "P3" << endl;
	toDelete->left->parent = toDelete->parent;
      }
      cout << "P4" << endl;
    }
    cout << "P5" << endl;
    print(head, 0);
    cout << "P6" << endl;
    //delete toDelete;
    cout << "After Delete" << endl;
    return;
  }
  cout << "After Bottom and Red" << endl;
  print(head, 0);
  cout << "After Print command" << endl;

  //If the node to delete is black and the child of it is red, we move the red up and change the color to black
  if(getColor(toDelete) == BLACK && getColor(toDelete->right) == RED) {
    cout << "In this command" << endl;
    if(toDelete->data >= toDelete->parent->data) {
      cout << "P1" << endl;
      toDelete->parent->right = toDelete->right;
      if(toDelete->right != NULL) {
	toDelete->right->color = BLACK;
	toDelete->right->parent = toDelete->parent;
      }
    }
    else {
      cout << "P2" << endl;
      toDelete->parent->left = toDelete->right;
      cout << "P3" << endl;
      if(toDelete->left != NULL) {
	cout << "P5" << endl;
	toDelete->left->color = BLACK;
	cout << "P4" << endl;
	toDelete->left->parent = toDelete->parent;
      }
    }
    cout << "P5" << endl;
    //delete toDelete;
    return;
  }

  cout << "Between these two commands" << endl;
  
  if(getColor(toDelete) == BLACK && getColor(toDelete->right) == BLACK) {
    cout << "BLACK PARENT BLACK CHILD DOUBLE BLACK" << endl;
  }
  cout << "End of call delete function" << endl;
  doubleBlackFix(head, toDelete, true);
}






























































































int getSide(node* child, node* parent) {
  if(parent->right == child) {
    cout << "Side: right" << endl;
    return RIGHT;
  }
  else {
    cout << "side: left" << endl;
    return LEFT;
  }
}


int getNumberOfChildren(node* current) {
  int returnValue = 2;
  if(current->left == NULL) {
    returnValue --;
  }
  if(current->right == NULL) {
    returnValue--;
  }
  return returnValue;
}




node* nodeToDelete(node* head, int element) {
  node* current = search(head, element);
  if(current->right == NULL) {
    return NULL;
  }
  else {
    current = current->right;
  }
  while(current->left != NULL) {
    current = current->left;
  }
  return current;
}


//Search Function
node* search(node* head, int element) {
  //If the head is NULL, that means we reached a dead end and the element wasn't in the tree
  if(head == NULL) {
    return NULL;
  }
  //If the head is equal to the element, return head
  else if (head->data == element) {
    return head;
  }
  //If head is greater, then search right side
  else if(head->data < element) {
    return search(head->right, element);
  }
  //If head is less, then search left side
  else {
    return search(head->left, element);
  }
}


//This function fixes the tree
void fixTree(node* &head, node* current) {
  //If our node is the first root/top/head node, we make it black 
  //This is case 0
  if(head == current) {
    current->color = BLACK;
    return;
  }

  //Parent and uncle are both red
  //This is case 1
  cout << "BC 1" << endl;
  if(getColor(current->parent) == RED && getColor(getUncle(current)) == RED) {
    cout << "IN 1" << endl;
    current->parent->color = BLACK;
    getUncle(current)->color = BLACK;
    current->parent->parent->color = RED;
    fixTree(head, current->parent->parent);
    return;
  }
  
  //Uncle is black and parent is red
  //This is case 2/3
  cout << "BC 2/3" << endl;
  if((getColor(current->parent) == RED) && (getColor(getUncle(current)) == BLACK)) {
    cout << "In 2/3" << endl;
    /*We go into this if statemenet if we form a triangle like:
           G(B)
       P(R)
           C(R)

       Case 2
     */
    if(current->data >= current->parent->data && current->parent->parent->data >= current->parent->data) {
      cout << "P1" << endl;
      node* parent = current->parent;
      node* grandparent = current->parent->parent;

      current->left = parent;
      grandparent->left = current;
      parent->right = NULL;
      parent->parent = current;
      current->parent = grandparent;
      fixTree(head, parent);
      return;
    }
    /*This is if the triangle is the other way around
      G(B)
           P(R)
      C(R)

      Case 2
     */
    
    else if(current->data < current->parent->data && current->parent->parent->data < current->parent->data) {
      cout << "P2" << endl;
      node* parent = current->parent;
      node* grandparent = current->parent->parent;
      node* swapChild = current->right;

      current->right = parent;
      grandparent->right = current;
      parent->left = swapChild;
      if(swapChild != NULL) {
	swapChild->parent = parent;
      }
      parent->parent = current;
      current->parent = grandparent;
      fixTree(head, parent);
      return;
    }


    /*THis is if we form a line as follows
                 G (B)
            P(R)
      C(R)

      Case 3
      The letter after the variable (like the D in siblingD) is refering to the example in video linked at the very top that I used as reference 
     */

    if(current->data >= current->parent->data && current->data >= current->parent->parent->data) {
      cout << "p4" << endl;
      node* siblingD = getSibling(current);
      node* grandparentB = current->parent->parent;
      node* parentA = current->parent;
      parentA->left = grandparentB;
      grandparentB->right = siblingD;
      if(siblingD != NULL) {
	siblingD->parent = grandparentB;
      }
      if(grandparentB == head) {
	head = parentA;
	parentA->parent = NULL;
	grandparentB->parent = parentA;
      }
      else {
	parentA->parent = grandparentB->parent;
	grandparentB->parent = parentA;
	node* greatGrandparent = parentA->parent;
	if(parentA->data >= greatGrandparent->data) {
	  greatGrandparent->right = parentA;
	}
	else {
	  greatGrandparent->left = parentA;
	}
      }
      parentA->color = BLACK;
      grandparentB->color = RED;
      print(head, 0);
      cout << "D" << endl;
    }
    /*
      This is if we form a line as follows
      G (B)
            P(R)
                 C(R)

       Case 3
       The letter after the variable (like the D in siblingD) is refering to the example in video linked at the very top that I used as reference
     */
    if(current->data < current->parent->data && current->data < current->parent->parent->data) {
      cout << "P5" << endl;
      node* siblingD = getSibling(current);
      node* grandparentB = current->parent->parent;
      node* parentA = current->parent;
      parentA->right = grandparentB;
      grandparentB->left = siblingD;
      if(siblingD != NULL) {
	siblingD->parent = grandparentB;
      }
      if(grandparentB == head) {
	head = parentA;
        parentA->parent = NULL;
        grandparentB->parent = parentA;
      }
      else {
        parentA->parent = grandparentB->parent;
        grandparentB->parent = parentA;
        node* greatGrandparent = parentA->parent;
        if(parentA->data < greatGrandparent->data) {
          greatGrandparent->left = parentA;
        }
        else {
          greatGrandparent->right = parentA;
        }
      }
      parentA->color = BLACK;
      grandparentB->color = RED;
    }    
  }
}


//This gets the color of the current node (so that everytime we don't have to check for NULL)
bool getColor(node* current) {
  if(current == NULL) {
    return BLACK;
  }
  return current->color;
}

//This gets the sibling of the current node
node* getSibling(node* current) {
  node* parent = current->parent;
  if(parent->left == current) {
    return parent->right;
  }
  else {
    return parent->left;
  }
}

//This gets the uncle of the current node
node* getUncle(node* current) {
  if(current->parent == NULL){
    return NULL;
  }
  return getSibling(current->parent);
}

//This is the same print function as BST, but it also prints R or B for red or black
void print(node *head, int space)  
{
  //if the node pointer is null, we just return
  if (head == NULL) {
    return;
  }
  //This increases indentation by however much we want (which is a constant called count)  
  space += COUNT;  
  
  //First we print the right sequence  
  print(head->right, space);
  
  //Then we print out a new line
  cout<<endl;
  //Next we print out the number of spaces that we need (based on our variable called space
  for (int i = COUNT; i < space; i++){
    cout<<" ";
  }
  //Then we print out the number
  cout<<head->data;
  if(getColor(head) == BLACK) {
    cout << "B"; 
  }
  else {
    cout << "R";  
  }
  
  cout << endl;
  //Finally we print everything to the left of our node
  print(head->left, space);
 }

//This calls insert, so that the previous function doesn't have to figure out if they have to put left or right
node* callInsert (node* &head, int element) {
  if(head == NULL) {
    head = new node(element);
    return head;
  }
  if(head->data >= element) {
    return insert(head, element, LEFT);
  }
  else{
    return insert(head, element, RIGHT);
  }
}


//Function to insert - Its built like this so we can set parent nodes easily
node* insert (node* &head, int element, int side) {

  //If the previous repititon said to go to the right side, we check the right side
  if(side == RIGHT){
    //If it is null, we change it to a new node with the element and set the parent of the new node to the parent(head)
    if(head->right == NULL) {
      head->right = new node(element);
      head->right->parent = head;
      return head->right;
    }
    //Otherwise if we have to go to the left, we tell the next repetition to go to the left (so that the next repetition has acces to the parent function)
    else if(head->right->data >= element) {
      return insert(head->right, element, LEFT);
    }
    //Same thing if it has to go right
    else {
      return insert(head->right, element, RIGHT);
    }
  }
  //We do the same thing if the side is left, and its self explanitory based on the previous section
  else {
    if(head->left == NULL) {
      head->left = new node(element);
      head->left->parent = head;
      return head->left;
    }
    else if(head->left->data >= element) {
      return insert(head->left, element, LEFT);
    }
    else {
      return insert(head->left, element, RIGHT);
    }
  }
}
